<!DOCTYPE html>
<html lang="en">

<head>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.12.1/css/jquery.dataTables.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/searchpanes/1.4.0/css/searchPanes.dataTables.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/searchpanes/1.4.0/js/dataTables.searchPanes.min.js"></script>
  <link rel="stylesheet" href="style.css">
</head>
<style>

.switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
    border-radius: 34px;
}

.slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .slider {
    background-color: #2196F3;
}

input:focus + .slider {
    box-shadow: 0 0 1px #2196F3;
}

input:checked + .slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);
}


.caption-container {
  text-align: center;
  background-color: #222;
  padding: 2px 16px;
  color: white;
}

.row:after {
  content: "";
  display: table;
  clear: both;
}

/* Three columns side by side */
.column {
  float: left;
  width: 33.33%;
  padding: 8px;
}

/* Add a transparency effect for thumbnail images */
.demo {
  opacity: 0.6;
}

.active,
.demo:hover {
  opacity: 1;
}


/* Additional styling for the caption */
#caption {
  display: block;
  margin-top: 8px;
  font-size: 14px;
  color: #f2f2f2;
}

  .size-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    border: 1px solid #ddd;
    margin-bottom: 10px;
  }

  .size-name {
    flex-grow: 1;
    margin-right: 10px;
  }

  .remove-button {
    cursor: pointer;
  }

.size-item {
    margin-bottom: 10px; /* Điều chỉnh khoảng cách giữa các phần tử */
}

.size-name, .price-name, .remove-button {
    display: block;
    margin-bottom: 5px; /* Điều chỉnh khoảng cách giữa các phần tử trong mỗi size-item */
}
.size-name,
.price-name{
    margin-right: 140px;
}


</style>
<body>
  <div class="container">
  <h3>Chi tiết sản phẩm</h3>
    <div class="row">
       <div class="col-md-6">
        <div class="mb-3">
         <label class="form-label">Id sản phẩm</label>
          <input class="form-control" name="product_name" id="product_name" required="required" value="{{data._id}}">
          <form action="http://localhost:3000/api/updatebyadmin/products/{{data._id}}" method="post" id="updateForm" enctype="multipart/form-data">
            <div class="mb-3">
              <label class="form-label">Ảnh</label>
              <div class="d-flex flex-column ">
            <img src="{{data.images.0.url}}" alt="" style="width:100px; height: 100px;">


              </div>
              <input type="file" class="form-control mt-3" id="images" name="images" accept="image/*">
            </div>
              <div class="mb-3">
            <label class="form-label">Giá sản phẩm</label>
            <input type="number" class="form-control" name="product_price" id="product_price" required="required" value="{{data.product_price}}">
            <div id="emailHelp" class="form-text"></div>
           
          </div>
          <div class="mb-3">
            <label class="form-label">Danh mục</label>
            <select class="form-control" name="categoryId" id="categoryId" required>
            </select>
          </div>
               <label class="form-label">Mô tả</label>
          <textarea class="form-control" style="height: 300px;" name="description" id="description" required="required">{{data.description}}</textarea>
           <div class="mb-3">
            <button type="submit "class="btn btn-primary fa-lg gradient-custom-2 mb-3" style="margin-top: 10px;">Cập nhật</button>
               <button type="submit "class="btn btn-primary fa-lg gradient-custom-2 mb-3" style="margin-top: 10px;">Hủy</button>
          </div>
          </div>
      </div>
      <div class="col-md-6">
        <div class="mb-3">
          <label class="form-label">Tên sản phẩm</label>
          <input class="form-control" name="product_name" id="product_name" required="required" value="{{data.product_name}}">
          <div id="emailHelp" class="form-text"></div>
       
  <div class="w3-container">
    <body data-product-id="{{data._id}}">
        <label class="form-label">Kích cỡ</label>
        <ul class="w3-ul w3-card-4" id="sizeList">

        </ul>
    </body>
</div>

 <div class="w3-container">
    <body data-product-id="{{data._id}}">
        <label class="form-label">Topping</label>
     <ul id="toppingList" class="w3-ul w3-card-4"></ul>
        </ul>
    </body>
</div>
          </form>
        </div>
      </div>
    </div>
  </div>
  <script>
    $(document).ready(async function () {
      try {
     
        const response = await fetch('http://localhost:3000/api/categories');
        const data = await response.json();

        $('#categoryId').html('');
        data.forEach(category => {
          const option = $('<option>', {
            value: category._id,
            text: category.category_name,
          });
          $('#categoryId').append(option);
        });
      } catch (error) {
        console.error("Error fetching categories:", error);
      }

      document.getElementById('updateForm').addEventListener('submit', function (event) {
        const confirmUpdate = confirm("Do you really want to update this?");
        if (!confirmUpdate) {
          event.preventDefault();
        } else {
          if (window.location.href.includes('/api/admin/products')) {
            window.location.href = 'http://localhost:3000/api/admin/products';
          }
        }
      });
      const fileInput = document.getElementById("images");
    const imgPreview = document.getElementById("img-preview");
    fileInput.addEventListener('change', function () {
      if (fileInput.files && fileInput.files[0]) {
        let reader = new FileReader();

        reader.onload = function (e) {
          imgPreview.src = e.target.result;
        };

        reader.readAsDataURL(fileInput.files[0]);
      } else {
        console.log("No image file selected");
      }
    });
    });

  </script>

  <script>
let slideIndex = 1;
showSlides(slideIndex);

function plusSlides(n) {
  showSlides(slideIndex += n);
}

function currentSlide(n) {
  showSlides(slideIndex = n);
}

function showSlides(n) {
  let i;
  let slides = document.getElementsByClassName("mySlides");
  let dots = document.getElementsByClassName("demo");
  let captionText = document.getElementById("caption");
  if (n > slides.length) {slideIndex = 1}
  if (n < 1) {slideIndex = slides.length}
  for (i = 0; i < slides.length; i++) {
    slides[i].style.display = "none";
  }
  for (i = 0; i < dots.length; i++) {
    dots[i].className = dots[i].className.replace(" active", "");
  }
  slides[slideIndex-1].style.display = "block";
  dots[slideIndex-1].className += " active";
  captionText.innerHTML = dots[slideIndex-1].alt;
}
  </script>

    <script>
$(document).ready(async function () {
    try {
      const productId = $('body').data('product-id');
      const sizeResponse = await fetch(`http://localhost:3000/api/size/product/${productId}`);
      const sizeData = await sizeResponse.json();

      // Display size names in the sizeList ul
      const sizeList = $('#sizeList');

      sizeData.forEach(size => {
        const listItem = $('<li>', {
          class: 'size-item',
        });

        const sizeName = $('<span>', {
         
          class: 'size-name',
          text: size.size_name,
        });
         const sizePrice = $('<span>', {
          
          class: 'price-name',
           text: `Giá: ${formatCurrency(size.size_price)}`,
        });

      const closeButton = $('<button>', {
    class: 'remove-button',
    text: '×',
    click: function() {
        const confirmed = confirm("Bạn có muốn xóa không ?");
        if (confirmed) {
            removeSize(this, size._id);
        }
    }
});

        listItem.append(sizeName,sizePrice,closeButton);
        sizeList.append(listItem);
      });
    } catch (error) {
      console.error('Error fetching size data:', error);
    }
  });

  
</script>

  <script>

$(document).ready(async function () {
    try {
        const productId = $('body').data('product-id');
        const toppingResponse = await fetch(`http://localhost:3000/api/topping/${productId}`);
        const toppingData = await toppingResponse.json();
        const toppingList = $('#toppingList');

        toppingData.forEach(topping => {
            const listItem = $('<li>', {
                class: 'size-item',
            });

            const toppingName = $('<span>', {
                class: 'name',
                text: `Tên: ${topping.name}`,
            });

            const toppingPrice = $('<span>', {
                class: 'price_tooping',
                text: `Giá: ${formatCurrency(topping.price) }`,
            });

            const switchContainer = $('<label>', {
                class: 'switch',
            });

            const switchInput = $('<input>', {
                type: 'checkbox',
                class: 'checkbox-toggle-active',
                checked: topping.isActive,
                click: function () {
                    toggleToppingStatus(topping._id, this.checked);
                }
            });

            
      const closeButton = $('<button>', {
    class: 'remove-button',
    text: '×',
    click: function() {
        const confirmed = confirm("Bạn có muốn xóa đồ ăn kèm không ?");
        if (confirmed) {
            removeTopping(this, topping._id);
        }
    }
});


            const switchSlider = $('<span>', {
                class: 'slider round',
            });

            switchContainer.append(switchInput, switchSlider);
            listItem.append(toppingName, toppingPrice, switchContainer,closeButton);
            toppingList.append(listItem);
        });
    } catch (error) {
        console.error('Error fetching topping data:', error);
    }
});

function toggleToppingStatus(toppingId, isChecked) {
    fetch(`http://localhost:3000/api/topping/active/${toppingId}`, {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isActive: isChecked }),
    })
    .then(response => response.json())
    .then(data => {
        console.log('Topping status updated successfully:', data);
        // Hiển thị thông báo thành công
        Swal.fire({
            icon: 'success',
            title: 'Thành công',
            text: 'Cập nhật trạng thái thành công!',
        });
    })
    .catch(error => {
        console.error('Error updating topping status:', error);
        Swal.fire({
            icon: 'success',
            title: 'Thành công',
            text: 'Cập nhật trạng thái thành công!',
        });
    });
}
</script>

<script>
   function removeSize(button, sizeId) {
    var listItem = $(button).parent();
    callApiToDeleteSize(sizeId);
    listItem.remove();
  }

    function callApiToDeleteSize(sizeId) {
        var apiUrl = 'http://localhost:3000/api/delete/size/' + sizeId;

        fetch(apiUrl, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    }
</script>

<script>
   function removeTopping(button, sizeId) {
    var listItem = $(button).parent();
    callApiToDeleteTopping(sizeId);
    listItem.remove();
  }

    function callApiToDeleteTopping(sizeId) {
        var apiUrl = 'http://localhost:3000/api/topping/delete/' + sizeId;

        fetch(apiUrl, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    }
</script>
  <script>
function formatCurrency(price) {
    // Parse the raw price as a float (assuming it's a number)
    const numericPrice = parseFloat(price);

    // Check if the numeric price is a valid number
    if (!isNaN(numericPrice)) {
        // Format the price using the toLocaleString method
        return numericPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
    } else {
        // If the price is not a valid number, return it as is
        return price;
    }
}
</script>
</body>
</html>
