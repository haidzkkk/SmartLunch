<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">

  <title>Hiển thị dữ liệu API</title>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.12.1/css/jquery.dataTables.min.css">
  <link rel="stylesheet" href="https://cdn.datatables.net/searchpanes/1.4.0/css/searchPanes.dataTables.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
  <!-- SweetAlert2 -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/searchpanes/1.4.0/js/dataTables.searchPanes.min.js"></script>



  <style>

     /* Style the switch */
.switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
}

/* Hide default HTML checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider (round) */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  transition: .4s;
  border-radius: 34px;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  transition: .4s;
  border-radius: 50%;
}

/* When the checkbox is checked, change the background color of the slider */
.switch input:checked + .slider {
  background-color: #2196F3;
}

/* When the checkbox is checked, translate the position of the round slider */
.switch input:checked + .slider:before {
  transform: translateX(26px);
}

/* Rounded sliders */
.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}

#datatable th:nth-child(1),
#datatable td:nth-child(1) {
  width: 20px; 
  
}
#datatable th:nth-child(2),
#datatable td:nth-child(2) {
  width: 80px; /* Điều chỉnh kích thước cột giá tùy theo nhu cầu của bạn */
}
#datatable th:nth-child(7),
#datatable td:nth-child(7) {
  width: 80px; /* Điều chỉnh kích thước cột giá tùy theo nhu cầu của bạn */
}
#datatable th:nth-child(5),
#datatable td:nth-child(5) {
  width: 80px; /* Điều chỉnh kích thước cột giá tùy theo nhu cầu của bạn */
}
/* Bổ sung thêm kiểu để tránh làm mất dữ liệu hiển thị trong cột */
#datatable td:nth-child(6) {
  text-align: center; /* Căn giữa nếu cần thiết */
}
#datatable td:nth-child(5) {
  text-align: center; /* Căn giữa nếu cần thiết */
}
#datatable tbody tr:nth-child(even) {
  background-color: #ffffff;
}

/* Đặt màu cho dòng lẻ */
#datatable tbody tr:nth-child(odd) {
  background-color: #ffffff;
}
table.dataTable tbody tr.selected>* {
    box-shadow: inset 0 0 0 9999px #ffffff;
    color: rgb(10, 3, 3);
    
}
a {
    color: #0d6efd;
     text-decoration: none; 
}
    </style>
  </style>
</head>

<body>
 <div class="container section-container">
    <a href="/api/admin/products/create" class="btn btn-primary fa-lg gradient-custom-2 mb-3">Tạo sản phẩm mới</a>
    <a class="btn btn-danger fa-lg gradient-custom-2 mb-3" id="deleteAll">Xóa tất cả</a>
    <h3>Bảng sản phẩm </h3>
    <table id="datatable" class="table table-striped table-bordered" style="width:100%">
      <thead>
        <tr>
          <th style="text-align: center"> <input type="checkbox" id="select-all"></th>
          <th style="color: #000000">id</th>
          <th style="color: #000000">Ảnh</th>
          <th style="color: #000000">Tên sản phẩm</th>
          <th style="color: #000000">Giá </th>
          <th style="color: #000000">Danh mục</th>
          <th style="color: #000000">Bán</th>
          <th style="color: #000000">Tính năng</th>
        </tr>
      </thead>
      <tbody>
        {{#each data}}
        <tr>
          <td style="text-align:center"><input type="checkbox" class="row-checkbox"></td>
           <td>{{this._id}}</td>
          <td><img src="{{this.images.0.url}}" alt="Product Image" width="100px" height="60px" id="img-preview"></td>
          <td>{{this.product_name}}</td>
         <td class="formatted-price">{{ this.product_price }}</td>
          <td class="category-cell" data-category-id="{{this.categoryId}}">Loading...</td>
          
        <td>
  <label class="switch">
    <input type="checkbox" class="btn-toggle-active" data-product-id="{{this._id}}" {{#if this.isActive}}checked{{/if}}>
    <span class="slider round"></span>
  </label>
</td>
       <td>
    <a href="javascript:void(0)" data-id="{{this._id}}" data-bs-toggle="modal" data-bs-target="#sizeModal" class="icon-size">
      <svg width="28" height="28" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M16.9702 12.25V16.75C16.9702 20.5 15.4702 22 11.7202 22H7.22021C3.47021 22 1.97021 20.5 1.97021 16.75V12.25C1.97021 8.5 3.47021 7 7.22021 7H11.7202C15.4702 7 16.9702 8.5 16.9702 12.25Z" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M21.9702 5.85V9.15C21.9702 11.9 20.8702 13 18.1202 13H16.9702V12.25C16.9702 8.5 15.4702 7 11.7202 7H10.9702V5.85C10.9702 3.1 12.0702 2 14.8202 2H18.1202C20.8702 2 21.9702 3.1 21.9702 5.85Z" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

    </a>
     <a href="javascript:void(0)" data-id="{{this._id}}" data-bs-toggle="modal" data-bs-target="#toppingModal" class="icon-topping">
     <svg width="28" height="28" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"style="margin-left: 10px;">
<path d="M8.80994 2L5.18994 5.63" stroke="#0C0507" stroke-width="1.5" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M15.1899 2L18.8099 5.63" stroke="#0C0507" stroke-width="1.5" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M2 7.84998C2 5.99998 2.99 5.84998 4.22 5.84998H19.78C21.01 5.84998 22 5.99998 22 7.84998C22 9.99998 21.01 9.84998 19.78 9.84998H4.22C2.99 9.84998 2 9.99998 2 7.84998Z" stroke="#0C0507" stroke-width="1.5"/>
<path d="M9.75977 14V17.55" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round"/>
<path d="M14.3599 14V17.55" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round"/>
<path d="M3.5 10L4.91 18.64C5.23 20.58 6 22 8.86 22H14.89C18 22 18.46 20.64 18.82 18.76L20.5 10" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round"/>
</svg>
    </a>

     <a href="javascript:void(0)" class="update-link" data-id="{{this._id}} "style="margin-left: 10px;">
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M22.002 12C22.002 17.52 17.522 22 12.002 22C6.48195 22 3.11195 16.44 3.11195 16.44M3.11195 16.44H7.63195M3.11195 16.44V21.44M2.00195 12C2.00195 6.48 6.44195 2 12.002 2C18.672 2 22.002 7.56 22.002 7.56M22.002 7.56V2.56M22.002 7.56H17.562" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

    </a>
    <a href="javascript:void(0)" class="delete-link" data-id="{{this._id}}" style="margin-left: 10px;">
        <svg width="28" height="28" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M21 5.97998C17.67 5.64998 14.32 5.47998 10.98 5.47998C9 5.47998 7.02 5.57998 5.04 5.77998L3 5.97998" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M8.5 4.97L8.72 3.66C8.88 2.71 9 2 10.69 2H13.31C15 2 15.13 2.75 15.28 3.67L15.5 4.97" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M18.8499 9.14014L18.1999 19.2101C18.0899 20.7801 17.9999 22.0001 15.2099 22.0001H8.7899C5.9999 22.0001 5.9099 20.7801 5.7999 19.2101L5.1499 9.14014" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M10.3301 16.5H13.6601" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M9.5 12.5H14.5" stroke="#0C0507" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

    </a>
</td>
        </tr>
    <div class="row">
      <div class="col">
        <div class="modal" tabindex="-1" role="dialog" id="toppingModal">
          <div class="modal-dialog" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Thêm Đồ ăn kèm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
               
                <form id="sizeForm">
                  <div class="mb-3">
                    <label for="name" class="form-label">Tên đồ ăn kèm </label>
                    <input type="text" class="form-control" id="name" required>
                  </div>
                 <div class="mb-3">
    <label for="size" class="form-label">Giá đồ ăn kèm</label>
    <input type="number" class="form-control" id="size" required>
    <div id="error-message" style="color: red;"></div>
</div>
                     <input type="hidden" class="product-id-for-topping">
                  <button type="button" class="btn btn-primary" onclick="addTopping()">Thêm</button>
                  <button type="button" class="btn btn-primary" onclick="HuyTopping()">Hủy</button>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>


<div class="row">
    <div class="col">
        <div class="modal" tabindex="-1" role="dialog" id="sizeModal">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Thêm kích cỡ</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form class="size-form">
                            <div class="mb-3">
                                <label for="sizeName" class="form-label">Tên kích cỡ</label>
                                <input type="text" class="form-control size-name" maxlength="5" required>
                            </div>
                            <div class="mb-3">
                                <label for="priceSize" class="form-label">Giá kích cỡ</label>
                                <input type="number" class="form-control size-price" required>
                            </div>
                            <!-- Hidden input to store the product ID -->
                            <input type="hidden" class="product-id-for-size">
                            <button type="button" class="btn btn-primary" onclick="addSize()">Thêm</button>
                            <button type="button" class="btn btn-primary" onclick="HuySize()">Hủy</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

        {{/each}}
      </tbody>
      
    </table>
      
<script>
  // Xử lý sự kiện change cho checkbox toggle-active
  $(document).on('change', '.btn-toggle-active', function () {
    // Lưu giữ tham chiếu đến phần tử hiện tại
    const checkbox = $(this);
    const productId = checkbox.data('product-id');
    const isActive = checkbox.is(':checked'); // Sử dụng is(':checked') để kiểm tra checkbox
    const productName = checkbox.closest('tr').find('td:eq(1)').text(); // Lấy tên sản phẩm từ cột thứ 2 (index 1)

    // Hiển thị hộp thoại xác nhận
    const confirmMessage = `Bạn có chắc chắn muốn ${isActive ? 'bật' : 'tắt'} sản phẩm ${productName} không?`;
    Swal.fire({
      title: 'Thông báo',
      text: confirmMessage,
      icon: 'info',
      showCancelButton: true, // Hiển thị nút Hủy
      confirmButtonText: 'Đồng ý',
      cancelButtonText: 'Hủy'
    }).then((result) => {
      if (result.isConfirmed) {
        // Nếu người dùng đồng ý, thực hiện các bước sau
        console.log('Product ID:', productId);

        // Gửi yêu cầu PATCH tới API để cập nhật trạng thái isActive của sản phẩm
        $.ajax({
          type: 'PATCH',
          url: `http://localhost:3000/api/toggleActive/${productId}`,
          success: function (data) {
            // Cập nhật trạng thái của checkbox
            checkbox.prop('checked', isActive); // Sử dụng giá trị thực tế của isActive
          },
          error: function (error) {
            console.error('Lỗi khi chuyển đổi trạng thái kích hoạt:', error);
          }
        });

        Swal.fire({
          title: 'Thành công',
          text: `Sản phẩm ${productName} đã được ${isActive ? 'bật' : 'tắt'}.`,
          icon: 'success',
          confirmButtonText: 'OK'
        });
      } else {
        // Nếu người dùng không đồng ý, đảm bảo checkbox không thay đổi
        checkbox.prop('checked', !isActive);
      }
    });
  });

  $.get('http://localhost:3000/api/categories', function (categories) {
    const categoryMap = {};

    categories.forEach(function (category) {
      categoryMap[category._id] = category.category_name;
    });

    $('.category-cell').each(function () {
      const categoryId = $(this).data('category-id');
      const categoryName = categoryMap[categoryId];
      console.log(categoryName)
      $(this).text(categoryName);
    });
  });
</script>

<script>
        $(document).ready(function () {
           var table = $('#datatable').DataTable({});

               $('#select-all').click(function () {
                $('.row-checkbox').prop('checked', this.checked);
                table.rows().every(function () {
                    this.nodes().to$().toggleClass('selected', this.checked);
                });
            });

            // Sự kiện click cho checkbox
            $('#datatable tbody').on('click', '.row-checkbox', function (e) {
                e.stopPropagation();
                updateSelectAllCheckbox();
            });

               $('#deleteAll').click(function () {
        var allIds = [];
        $('.row-checkbox:checked').each(function () {
            allIds.push($(this).closest('tr').find('.delete-link').data('id'));
        });

        if (allIds.length > 0) {
            // Use SweetAlert for a confirmation dialog
            Swal.fire({
                title: 'Xóa Sản phẩm',
                text: 'Bạn có muốn xóa hết sản phẩm không?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Có',
                cancelButtonText: 'Không'
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteAllCategories(allIds);
                }
            });
        } else {
            alert("Please select items to delete.");
        }
    });
            // Hàm cập nhật trạng thái checkbox "Chọn tất cả"
            function updateSelectAllCheckbox() {
                $('#select-all').prop('checked', $('.row-checkbox:checked').length === table.rows().count());
            }

    $('#datatable tbody').on('click', 'img', function () {
    var categoryId = $(this).closest('tr').find('.update-link').data('id');
    navigateToDetailPage(categoryId);
});


$('#datatable tbody').on('click', 'td:nth-child(3)', function () {
    var categoryId = $(this).closest('tr').find('.update-link').data('id');
    navigateToDetailPage(categoryId);
});

function navigateToDetailPage(categoryId) {
    window.location.href = "/api/admin/products/" + categoryId;
}
            
            $(".update-link").click(function () {
                event.stopPropagation();
                var categoryId = $(this).data("id");
            });

$(".delete-link").click(function (event) {
    event.preventDefault();  // Prevent the default link behavior
    event.stopPropagation();
    var categoryId = $(this).data("id");

    // Show a confirmation dialog
    var confirmDelete = confirm("Bạn có muốn xóa không ?");

    // If the user clicks OK in the confirmation dialog
    if (confirmDelete) {
        $.ajax({
            url: "http://localhost:3000/api/remove/products/" + categoryId,
            method: "GET",
            success: function (response) {
                window.location.href = "http://localhost:3000/api/admin/products";
            },
            error: function (error) {
                alert("Xóa thất bại");
            }
        });
    }
});

function deleteAllCategories(allIds) {
        $.ajax({
            url: "http://localhost:3000/api/removeProduct/",
            method: "GET",
            contentType: "application/json",
            data: JSON.stringify({ ids: allIds }),
            success: function (response) {
                // Xử lý thành công
                alert("Xóa tất cả thành công");
                window.location.reload();
            },
            error: function (error) {
                alert("Xóa tất cả thất bại");
            }
        });
}
            function updateSelectAllCheckbox() {
                $('#select-all').prop('checked', $('.row-checkbox:checked').length === table.rows().count());
            }
        });

        $('.update-link').click(function () {
    var categoryId = $(this).data('id');
    navigateToDetailPage(categoryId);
});
function navigateToDetailPage(categoryId) {
    window.location.href = "/api/admin/products/" + categoryId;
}
    </script>

<script>

     $(document).ready(function () {
        // Add click event for the icon to open the dialog
        $('.icon-topping').click(function () {
            // Retrieve the product ID and set it in the hidden input
            var productId = $(this).data('id');
            $('.product-id-for-topping').val(productId);
            // Show the dialog
            $('#toppingModal').modal('show');
        });
    });
    
   function HuyTopping() {
    // Đóng modal khi nút "Hủy" được bấm
    $('#toppingModal').modal('hide');
  }
  function addTopping() {
      const productId = $('.product-id-for-topping').val();
      const toppingName = $('#name').val();
const toppingPrice = $('#size').val();
    console.log(productId)

    const toppingData = {
      name: toppingName,
      price: toppingPrice,
      productId: productId
    };

    $.ajax({
      type: 'POST',
      url: 'http://localhost:3000/api/topping',
      contentType: 'application/json',
      data: JSON.stringify(toppingData),
      success: function (response) {
        console.log('Topping added successfully:', response);
        $('#toppingModal').modal('hide');
              window.location.href = 'http://localhost:3000/api/admin/products' ;
      },
      error: function (xhr, status, error) {
        console.error('Error adding topping:', error);
      
        alert('thêm sản đồ ăn kèm thất bại ');
      }
    });
  }
</script>


<script>
   $(document).ready(function () {
        // Add click event for the icon to open the dialog
        $('.icon-size').click(function () {
            // Retrieve the product ID and set it in the hidden input
            var productId = $(this).data('id');
            $('.product-id-for-size').val(productId);
            // Show the dialog
            $('#sizeModal').modal('show');
        });
    });
    
   function HuySize() {
    $('#sizeModal').modal('hide');
  }
  
   function addSize() {
  const productId = $('.product-id-for-size').val();
        const sizeName = $('.size-name').val();
        const priceSize = $('.size-price').val();

        const sizeData = {
            size_name: sizeName,
            size_price: priceSize,
            productId: productId
        };

        $.ajax({
            type: 'POST',
            url: 'http://localhost:3000/api/size',
            contentType: 'application/json',
            data: JSON.stringify(sizeData),
            success: function (response) {
                console.log('Size added successfully:', response);
                $('#sizeModal').modal('hide');
                window.location.href = 'http://localhost:3000/api/admin/products';
            },
            error: function (xhr, status, error) {
                console.error('Lỗi khi thêm kích thước', error);
                alert('Giá không nhỏ hơn 0, tên kích thước không được trùng.');
            }
        });
    }

function setProductIdForSize(productId) {
    selectProduct(productId); // Sử dụng hàm mới để chọn sản phẩm và cập nhật id
    $('.product-id').val(getCurrentProductId());
    $('#sizeModal').modal('show');
}
</script>

<script>
  // Wait for the DOM to be ready
$(document).ready(function () {
    // Select all elements with class 'formatted-price'
    $('.formatted-price').each(function () {
        // Get the raw price from the text content of the element
        const rawPrice = $(this).text();

        // Parse the raw price as a float (assuming it's a number)
        const numericPrice = parseFloat(rawPrice);

        // Check if the numeric price is a valid number
        if (!isNaN(numericPrice)) {
            // Format the price using the toLocaleString method
            const formattedPrice = numericPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });

            // Update the text content of the element with the formatted price
            $(this).text(formattedPrice);
        }
    });
});

</script>

</body>

</html>
